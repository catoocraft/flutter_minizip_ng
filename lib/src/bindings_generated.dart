// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_minizip_ng.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterMinizipNgBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterMinizipNgBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterMinizipNgBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int zip_extract(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> destination,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _zip_extract(
      path,
      destination,
      password,
    );
  }

  late final _zip_extractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('zip_extract');
  late final _zip_extract = _zip_extractPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> zip_create(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _zip_create(
      path,
      password,
    );
  }

  late final _zip_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('zip_create');
  late final _zip_create = _zip_createPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int zip_write_file(
    ffi.Pointer<ffi.Void> writer,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _zip_write_file(
      writer,
      name,
      file_path,
    );
  }

  late final _zip_write_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('zip_write_file');
  late final _zip_write_file = _zip_write_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int zip_write_data(
    ffi.Pointer<ffi.Void> writer,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> buffer,
    int buf_size,
  ) {
    return _zip_write_data(
      writer,
      name,
      buffer,
      buf_size,
    );
  }

  late final _zip_write_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('zip_write_data');
  late final _zip_write_data = _zip_write_dataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int zip_close(
    ffi.Pointer<ffi.Void> writer,
  ) {
    return _zip_close(
      writer,
    );
  }

  late final _zip_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          'zip_close');
  late final _zip_close =
      _zip_closePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();
}
